# Origin: https://gitlab.com/gaia-x/gaia-x-technical-committee/federation-services/wp2/catalogue-specification-artefacts/-/blob/master/rest-api.yaml

openapi: 3.0.1
info:
    title: Gaia-X Catalogue
    description: 'This is the REST API of the Gaia-X catalogue.'
    license:
        name: Apache 2.0
        url: http://www.apache.org/licenses/LICENSE-2.0.html
    version: 1.0.0
servers:
- url: https://api.gaiax.io/v1

# Authentication by OAuth2 (no scoping at this point)
components:
    securitySchemes:
        oAuthNoScopes:
            type: oauth2
            description: This API uses OAuth 2 with the implicit grant flow. [More info](https://api.example.com/docs/auth)
            flows:
                implicit:
                    authorizationUrl: https://api.gaiax.io/oauth2/authorize
                    scopes:
                        read_self-descriptions: read the Self-Descriptions
                        write_self-descriptions: Add, delete, and update a Self-Description
                        query: Send queries
    responses:
        NotFound:
            description: The specified resource was not found
            content:
                application/json:
                schema:
                    $ref: '#/components/schemas/Error'
        Unauthorized:
            description: Unauthorized
            content:
                application/json:
                schema:
                    $ref: '#/components/schemas/Error'
        ServerError:
            description: May contain hints how to solve the error or indicate what went wrong at the server. Must not outline any information about the internal structure of the server.
            content:
                application/json:
                schema:
                    $ref: '#/components/schemas/Error'
        ClientError:
            description: May contain hints how to solve the error or indicate what was wrong in the request.
            content:
                application/json:
                schema:
                    $ref: '#/components/schemas/Error'
    schemas:
        # Schema for error response body
        Error:
            type: object
            properties:
                code:
                    type: string
                message:
                    type: string
            required:
                - code
                - message
        Statements:
            type: object
            properties:
                statements:
                    type: array
                    items:
                        $ref: '#/components/schemas/Statement'
                    maxItems: 1 # only one statement can be sent for now. The array is for future

        # extensions
        Statement:
            type: object
            properties:
                statement:
                    type: string
                    example: 'Match (m:Movie) where m.released > 2000 RETURN m'
                parameters:
                    $ref: '#/components/schemas/Parameters'
            required:
                - statement

        Parameters:
            type: object
            properties:
                limit:
                    type: string
                    example: '10'
                offset:
                    type: string
                    example: '5'

        Results:
            type: object
            properties:
                results:
                type: array
                items:
                    $ref: '#/components/schemas/Result'
                maxItems: 1
            required:
            - results

        Result:
            type: object
            properties:
                columns:
                type: array
                example: ["column name 1", "column name 2"]
                items:
                    type: string
                    example: 'column names'
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/Data'
            required:
            - columns
            - data

        VerificationResult:
            type: object
            properties:
                verification-timestamp:
                    type: string
                lifecycle-status:
                    type: string # does the self-description have a lifecycle status in this catalogue?
                issuer:
                    type: object # contains the id of the issuers self-description if available
                issued-date:
                    type: string
                signatures:
                    type: array
                    items:
                        type: object
            required:
                - verification-timestamp
                - lifecycle-status
                - issuer
                - issued-date
                - signatures

        Data:
            type: object
            properties:
                row:
                    type: array
                    example: ["value1", "value2"]
                    items:
                        type: string
                meta:
                    type: array
                    example: ["meta1", "meta2"]
                    items:
                        type: string
            required:
            - row
            - meta

        Participant:
            type: object
            properties:
                id:
                    type: string
                    description: Global ID of the participant
                name:
                    type: string
                public-key:
                    type: string
                self-description:
                    type: string

        User:
            type: object
            properties:
                id:
                    type: string
                    description: Internal catalogue user id
                    example: 'ExampleCompany-John-Doe'
                participantId:
                    type: string
                    description: Global ID of the associated participant
                    example: 'ExampleCompany'
                username:
                    type: string
                    example: 'John Doe'
                email:
                    type: string
                roleIds:
                    type: array
                    items:
                        $ref: '#/components/schemas/Role'

        Role:
            type: object
            properties:
                id:
                    type: string
                    example: 'Ro-MU-CA'

        Session:
            type: object
            properties:
                userId:
                    type: string
                creationDate:
                    type: string
                status:
                    type: string
                roleIds:
                    type: array
                    items:
                        $ref: '#/components/schemas/Role'

        Self-Description:
            type: object
            properties:
                sd-hash:
                    type: string
                status:
                    type: integer
                issuer:
                    type: string
                issue-date:
                    type: string
                status-date:
                    type: string
                    description: The last time the status changed (for this Catalogue)
                
security:
    - oAuthNoScopes:
        - read_self-descriptions
        - write_self-descriptions
        - query

tags:
-   name: discovery
    description: 'Announce the endpoints of this Catalogue.'

-   name: self-descriptions
    description: 'Retrieving Self-Descriptions from the Catalogue. All Self-Descriptions are JSON-LD files. They are referenced by their sha256 hash. Catalogues synchronize by downloading changesets (lists of hashes) from known other Catalogues and reading the full Self-Descriptions of entries that are unknown to them.'
    externalDocs:
        description: Find out more
        url: http://gaiax.io

-   name: sandbox
    description: 'Try changes to the JSON-LD Self-Descriptions against the catalogue in a sandbox, i.e. the changes are not really applied. But the error messages allow the debugging of Self-Descriptions wrt trust and validation of the content on a syntactical and semantic level.'
    externalDocs:
        description: Find out more
        url: http://gaiax.io

-   name: query
    description: 'Send graph queries to this Catalogue.'

-   name: users
    description: User management for Catalogues not connected to an external IAM system

-   name: participants
    description: Management for registered participants in the catalogue

-   name: schemas
    description: The format of the self-descriptions are defined by schemas in the catalogue. Here you get information about the latest schema.

-   name: roles
    description: Management for the permission roles in the catalogue

-   name: verification
    description: The Catalogue provides a verification service for e.g. checking the syntax

paths:
    /:
        get:
            tags:
            - discovery
            summary: 'Announce all endpoints'
            operationId: discovery
            responses:
                200:
                    description: 'Provides a JSON element with relative paths to all other available endpoints of this Catalogue.'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    query:
                                        type: string
                                        example: './query'
                                    self-descriptions:
                                        type: string
                                        example: './self-descriptions'
                                    self\_description\_hash:
                                        type: string
                                        example: './self-descriptions/{self_description_hash}'
                        application/ld+json:
                            schema:
                                type: object
                                properties:
                                    '@context':
                                        type: object
                                        properties:
                                          gax:
                                            type: string
                                            example: "http://gaia-x.eu/gaiaxOntology"
                                    '@id':
                                        type: string
                                        example: "&lt;the identifier of this catalogue&gt;"
                                    gax:hasQueryEndpoint:
                                        type: string
                                        example: './query'
                                    gax:hasSelfDescriptionEndpoint:
                                        type: string
                                        example: './self-descriptions'
                                    gax:hasSelfDescriptionHashEndpoint:
                                        type: string
                                        example: './self-descriptions/{self_description_hash}'
                                    gax:isOperatedBy:
                                        type: string
                                        example: 'http://example.org/CatalogueProvider'

    /verifications/self-descriptions:
        get:
            tags:
                - verification
            summary: Show a HTML page to verify (portions of) a signed Self-Description
            operationId: verifyPage
            responses:
                200:
                    description: 'HTML document that contains a query field to verify (portions of) Self-Descriptions.'
                    content:
                        text/html:
                            schema:
                                type: string
                400:
                    $ref: '#/components/responses/ClientError'
                500:
                    $ref: '#/components/responses/ServerError'
        post:
            tags:
                - verification
            summary: 'Send a JSON-LD document to verify with the information from the Catalogue'
            operationId: verify
            requestBody:
                description: 'JSON-LD document to be verified object to send queries. Use "application/json" for openCypher queries. A Catalogue may also support the other content types depending on its supported query languages but only "application/json" is mandatory.'
                content: {}
            responses:
                200:
                    description: 'Verification result'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/VerificationResult'
                400:
                    $ref: '#/components/responses/ClientError'
                408:
                    description: 'Query Timeout: the query took longer than the configured timeout interval. The client needs to rewrite the query so it can be processed faster.'
                500:
                    $ref: '#/components/responses/ServerError'

    /sessions:
        get:
            tags:
                - session
            responses:
                200:
                    description: Get information on the current session
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Session'

    /sessions/logout:
        get:
            tags:
                - session
            responses:
                200:
                    description: The current session was closed

    /participants:
        get:
            tags:
                - participants
            summary: Get the registered participants
            operationId: listParticipants
            responses:
                200:
                    description: List of registered participants
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Participant'
                400:
                    $ref: '#/components/responses/ClientError'
                500:
                    $ref: '#/components/responses/ServerError'
        post:
            tags:
                - participants
            summary: Register a new participant in the catalogue
            operationId: addParticipant
            requestBody:
                description: Participant Self-Description
                content:
                    application/json-ld:
                        schema:
                            $ref: '#/components/schemas/Participant'
            responses:
                201:
                    description: Created
                400:
                    $ref: '#/components/responses/ClientError'
                500:
                    $ref: '#/components/responses/ServerError'

    /participants/{participantId}:
        get:
            tags:
                - participants
            summary: Get the registered participant
            operationId: getParticipant
            parameters:
                -   in: path
                    name: participantId
                    required: true
                    description: The participantId to get.
                    schema:
                        type: string
            responses:
                200:
                    description: The requested participant
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Participant'
                400:
                    $ref: '#/components/responses/ClientError'
                500:
                    $ref: '#/components/responses/ServerError'
        put:
            tags:
                - participants
            summary: Update a participant in the catalogue
            operationId: updateParticipant
            parameters:
                -   in: path
                    name: participantId
                    required: true
                    description: The participant to update.
                    schema:
                        type: string
            responses:
                200:
                    description: Updated Participant
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Participant'
                400:
                    $ref: '#/components/responses/ClientError'
                500:
                    $ref: '#/components/responses/ServerError'
        delete:
            tags:
                - participants
            summary: Delete a participant in the catalogue
            operationId: deleteParticipant
            parameters:
                -   in: path
                    name: participantId
                    required: true
                    description: The participant to delete.
                    schema:
                        type: string
            responses:
                200:
                    description: Deleted Participant
                    content:
                        application/json:
                        schema:
                            $ref: '#/components/schemas/Participant'
                400:
                    $ref: '#/components/responses/ClientError'
                500:
                    $ref: '#/components/responses/ServerError'

    /participants/{participantId}/users:
        get:
            tags:
                - participants
            summary: Get all users of the registered participant
            operationId: getUsersOfParticipant
            parameters:
                -   in: path
                    name: participantId
                    required: true
                    description: The participant to create.
                    schema:
                        type: string
            responses:
                200:
                    description: Users of the participant
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/User'
                400:
                    $ref: '#/components/responses/ClientError'
                500:
                    $ref: '#/components/responses/ServerError'

    /users:
        get:
            tags:
                - users
            summary: List the registered users
            operationId: listUsers
            responses:
                200:
                    description: List of usernames
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/User'
                400:
                    $ref: '#/components/responses/ClientError'
                500:
                    $ref: '#/components/responses/ServerError'
        post:
            tags:
                - users
            summary: Register a new user to the associated participant in the catalogue
            operationId: addUser
            requestBody:
                description: User Self-Description
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User'
            responses:
                201:
                    description: Created
                400:
                    $ref: '#/components/responses/ClientError'
                500:
                    $ref: '#/components/responses/ServerError'

    /users/{userId}:
        get:
            tags:
                - users
            summary: Get the user profile
            operationId: getUser
            parameters:
                -   name: userId
                    in: path
                    required: true
                    schema:
                        type: string
            responses:
                200:
                    description: User profile
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                400:
                    $ref: '#/components/responses/ClientError'
                500:
                    $ref: '#/components/responses/ServerError'
        put:
            tags:
                - users
            summary: Update the user profile
            operationId: updateUser
            parameters:
                -   name: userId
                    in: path
                    required: true
                    schema:
                        type: string
            responses:
                200:
                    description: Updated user profile
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                400:
                    $ref: '#/components/responses/ClientError'
                500:
                    $ref: '#/components/responses/ServerError'
    delete:
        tags:
            - users
        summary: Delete a user
        operationId: deleteUser
        parameters:
            -   name: userId
                in: path
                required: true
                schema:
                    type: string
        responses:
            200:
                description: Deleted user profile
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User'
            400:
                $ref: '#/components/responses/ClientError'
            500:
                $ref: '#/components/responses/ServerError'

    /users/{userId}/roles:
        get:
            tags:
                - users
            summary: Get the roles of the user
            operationId: getUserRoles
            parameters:
                -   name: userId
                    in: path
                    required: true
                    schema:
                        type: string
            responses:
                200:
                    description: User roles
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Role'
                400:
                    $ref: '#/components/responses/ClientError'
                500:
                    $ref: '#/components/responses/ServerError'
        put:
            tags:
                - users
            summary: Update the roles of the user
            operationId: updateUserRoles
            parameters:
                -   name: userId
                    in: path
                    required: true
                    schema:
                        type: string
            requestBody:
                description: List of roles which should be assigned to the user
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Role'
            responses:
                200:
                    description: All assigned roles of the user
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Role'
                400:
                    $ref: '#/components/responses/ClientError'
                500:
                    $ref: '#/components/responses/ServerError'

    /queries:
        get:
            tags:
                - query
            summary: Retrieve an HTML website to send openCypher queries to the Catalogue
            operationId: querywebsite
            security:
                - oAuthNoScopes:
                    - query
            responses:
                200:
                    description: 'HTML document that contains a query field for openCypher queries.'
                    content:
                        text/html:
                            schema:
                                type: string
                400:
                    $ref: '#/components/responses/ClientError'
                500:
                    $ref: '#/components/responses/ServerError'
        post:
            tags:
                - query
            summary: 'Send a query to the Catalogue'
            operationId: query
            parameters:
                -   in: header
                    name: query-language
                    schema:
                        type: string
                        enum: [openCypher, application/sparql-query, sparql*]
                        default: openCypher
                    required: true
            security:
                - oAuthNoScopes:
                    - query
            requestBody:
                description: 'JSON object to send queries. Use "application/json" for openCypher queries. A Catalogue may also support the other content types depending on its supported query languages but only "application/json" is mandatory.'
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Statements'
                    application/sparql-query:
                        example: ''
                    sparql*:
                        example: ''
            responses:
                200:
                    description: 'successful query'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Results'
                        application/sparql-results+xml:
                            example: ''
                        text/turtle:
                            example: ''
                        text/html:
                            example: ''
                400:
                    description: 'Malformed Message: The receveived request cannot be processed, either because its syntax is incorrect or forbidden query clauses are used. For instance, it is not allowed to manipulate data through the query endpoint.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/responses/ClientError'
                408:
                    description: 'Query Timeout: the query took longer than the configured timeout interval. The client needs to rewrite the query so it can be processed faster.'
                500:
                    $ref: '#/components/responses/ServerError'

    /self-descriptions:
        get:
            tags:
                - self-descriptions
            summary: Get the list of Self-Descriptions in the Catalogue
            operationId: readSelfDescriptions
            parameters:
                -   name: daterange
                    in: query
                    description: Range of dates for the Self-Descriptions (when the SD was first known this Catalogue)
                    required: false
                    schema:
                        type: string
                -   name: issuer
                    in: query
                    description: Filter for the issuer of the Self-Description. This is the unique ID of the Participant that has prepared the Self-Description. 
                    required: false
                    schema:
                        type: string
                -   name: offset
                    in: query
                    schema:
                        type: integer
                        minimum: 0
                        default: 0
                    required: false
                    description: The number of items to skip before starting to collect the result set.
                -   in: query
                    name: limit
                    schema:
                        type: integer
                        minimum: 1
                        maximum: 1000
                        default: 100
                    required: false
                    description: The number of items to return.
            responses:
                200:
                    description: List of self-description in JSON-LD format
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Self-Description'
                400:
                    $ref: '#/components/responses/ClientError'
                500:
                    $ref: '#/components/responses/ServerError'
        post:
            tags:
                - self-descriptions
            summary: Add a new self-description to the catalogue
            operationId: addSelfDescription
            security:
                - oAuthNoScopes:
                    - write_self-descriptions
            requestBody:
                description: The new Self-Description
                content:
                    application/json: {}
                required: true
            responses:
                201:
                    description: Created
                405:
                    description: Invalid input
                    content: {}
                400:
                    $ref: '#/components/responses/ClientError'
                500:
                    $ref: '#/components/responses/ServerError'

    /self-descriptions/{self_description_hash}:
        get:
            tags:
                - self-descriptions
            summary: Read a Self-Description by its hash
            description: Returns a single Self-Description
            operationId: readSelfDescriptionByHash
            parameters:
                -   name: self_description_hash
                    in: path
                    description: Hash of the self-description
                    required: true
                    schema:
                        type: string
            security:
                - oAuthNoScopes:
                    - read_self-descriptions
            responses:
                200:
                    description: The requested Self-Description
                    content:
                        application/json: {}
                404:
                    description: Self-Description not found
                    content: {}
                400:
                    $ref: '#/components/responses/ClientError'
                500:
                    $ref: '#/components/responses/ServerError'
        put:
            tags:
                - self-descriptions
            summary: Change the lifecycle state of a self-description
            operationId: updateSelfDescription
            parameters:
                -   name: self_description_hash
                    in: path
                    description: Hash of the self-description
                    required: true
                    schema:
                        type: string
            requestBody:
                description: Lifecycle update message
                content:
                    application/json: {}
                required: true
            responses:
                405:
                    description: Invalid input
                    content: {}
                400:
                    $ref: '#/components/responses/ClientError'
                500:
                    $ref: '#/components/responses/ServerError'
        delete:
            tags:
                - self-descriptions
            summary: Delete a self-description
            operationId: deleteSelfDescription
            parameters:
                -   name: self_description_hash
                    in: path
                    description: Hash of the self-description
                    required: true
                    schema:
                        type: string
            responses:
                200:
                    description: OK
                405:
                    description: Invalid input
                    content: {}
                400:
                    $ref: '#/components/responses/ClientError'
                500:
                    $ref: '#/components/responses/ServerError'

    /schemas/latest:
        get:
            tags:
                - schemas
            summary: Get the latest schema of all types
            operationId: getLatestSchemas
            responses:
                200:
                    description: The latest schemas of all types
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                405:
                    description: Invalid input
                    content: {}
                400:
                    $ref: '#/components/responses/ClientError'
                500:
                    $ref: '#/components/responses/ServerError'

    /schemas/latest/{type}:
        get:
            tags:
                - schemas
            summary: Get latest schemas of a specific type
            operationId: getLatestSchemaOfType
            parameters:
                -   name: type
                    in: path
                    description: Type of the requested Self-Description schema e.g. Service
                    required: true
                    schema:
                        type: string
            responses:
                200:
                    description: The latest schema of requested types
                    content:
                        application/json: {}
                405:
                    description: Invalid input
                    content: {}
                400:
                    $ref: '#/components/responses/ClientError'
                500:
                    $ref: '#/components/responses/ServerError'

    /roles:
        get:
            tags:
                - roles
            summary: Get all possible roles in the catalogue
            operationId: getAllRoles
            responses:
                200:
                    description: All roles
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Role'
                400:
                    $ref: '#/components/responses/ClientError'
                500:
                    $ref: '#/components/responses/ServerError'